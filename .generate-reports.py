#!/usr/bin/env python

# Script to generate a Maven site and push reports to a branch (gh-pages by default).
# This script assumes that both git and Maven have been installed and that the following environment variables
# are defined:
#   - REPORTS_GITHUB_ACCESS_TOKEN: GitHub personal access token used to push generated reports
#   - REPORTS_GITHUB_USERNAME: username used to push generated reports
# 
# Yes, these could be passed as arguments, but Travis log would print them out.

# Output of this script is to populate the gh-pages branch with the reports generated by running "mvn site".
# The structure of the generated reports is similar to:
# 
# (branch gh-pages)
# .
# ├── development
# │   ├── index.html
# │   ├── pmd.html
# │   ├── jacoco.html
# │   └── ...
# │  
# ├── 1.0.0
# │   ├── index.html
# │   ├── pmd.html
# │   ├── jacoco.html
# │   └── ...
# │  
# ├── 1.0.1
# │   ├── index.html
# │   ├── pmd.html
# │   ├── jacoco.html
# │   └── ...
# │  
# └── 2.0.0
#     ├── index.html
#     ├── pmd.html
#     ├── jacoco.html
#     └── ...
#
# So only one "development" version of the reports is maintained, while reports for all 
# tagged commits--assumed to be releases--are maintained on the gh-pages branch. 
# 
# The content of each of the folders is whatever Maven generates on the target/site folder.


import argparse, os, shutil, subprocess

# folder where maven outputs reports generated by running "mvn site"
MAVEN_SITE_DIR = os.path.join('target', 'site')
# base directory where reports will be copied to
BASE_REPORT_DIR = 'reports'
# credentials are given via environment variables
USERNAME_ENV_VARIABLE_NAME = 'REPORTS_GITHUB_USERNAME'
TOKEN_ENV_VARIABLE_NAME = 'REPORTS_GITHUB_ACCESS_TOKEN'


# parses arguments
def main():
    parser = argparse.ArgumentParser(description='QBiC Javadoc Generator.', prog='generate-javadocs.py', formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('-s', '--site-dir', default=MAVEN_SITE_DIR,
        help='Directory where Maven generates reports after executing "mvn site".')
    parser.add_argument('-b', '--base-output-dir', default=BASE_REPORT_DIR,
        help='Base directory where the reports will be copied.')    
    parser.add_argument('-p', '--pages-branch', default="gh-pages",
        help='Name of the git branch on which the reports will be pushed.')
    parser.add_argument('-u', '--username-var-name', default=USERNAME_ENV_VARIABLE_NAME,
        help='Name of the environment variable holding the GitHub username used to push changes in reports.')
    parser.add_argument('-a', '--access-token-var-name', default=TOKEN_ENV_VARIABLE_NAME,
        help='Name of the environment variable holding the GitHub personal access token used to push changes in reports.')
    parser.add_argument('output_dir', 
        help='Name of the folder, relative to the base output directory, where reports will be copied to. \
              This folder will be first cleared of its contents before the generated reports are copied.')
    parser.add_argument('repo_slug', help='Slug of the repository for which reports are being built.')
    parser.add_argument('commit_message', nargs='+', help='Message(s) to use when committing changes.')
    args = parser.parse_args()

    # check that the required environment variables have been defined
    if not args.username_var_name in os.environ or not args.access_token_var_name in os.environ:
        raise Exception('At least one of the required environment variables is missing. See comments on .generate-reports.py for further information.')

    # generate the reports using maven
    print('Generating reports using "mvn site"')
    execute(['mvn', 'site'], 'Could not generate reports')
    # check that the reports are where they should be (you never know!)
    if not os.path.exists(args.site_dir) or not os.path.isdir(args.site_dir):
        raise Exception('Maven site folder {} does not exist or is not a directory.'.format(args.site_dir))

    # change to the pages branch
    print('Changing to branch {}'.format(args.pages_branch))
    execute(['git', 'checkout', '-B', args.pages_branch], 'Could not checkout branch {}.'.format(args.pages_branch))

    # remove the contents of the output folder before copying the generated reports
    report_output_dir = os.path.join(args.base_output_dir, args.output_dir)
    if os.path.exists(report_output_dir):
        if not os.path.isdir(report_output_dir):
            raise Exception('Output destination {} exists and is not a directory.'.format(report_output_dir))
        # output path exists and it's a folder, we can safely delete it
        print('Removing {}'.format(report_output_dir))
        shutil.rmtree(report_output_dir)
    # we know the output folder doesn't exist, so we can recreate it
    print('Creating {}'.format(report_output_dir))
    os.makedirs(report_output_dir)

    # accidentally the whole target/site folder (well, yes, but actually, no, because we need only its contents)
    print('Moving contents of {} to {}'.format(args.site_dir, report_output_dir))
    for f in os.listdir(args.site_dir):
        shutil.move(os.path.join(args.site_dir, f), report_output_dir)
    
    # make sure to add a remote with the credentials provided via environment variables
    print('Configuring remote using provided credentials')
    execute(['git', 'remote', 'rm', 'origin'], 'Could not remove "origin" remote.')
    execute(['git', 'remote', 'add', 'origin', 
             'https://{}:{}@github.com/{}'.format(os.environ[args.username_var_name], os.environ[args.access_token_var_name], args.repo_slug)], 
             'Could not add "origin" remote with custom credentials')

    # add changes to the index
    print('Adding changes to the index')
    execute(['git', 'add', report_output_dir], 'Could not add {} to the repository\'s index.')
    
    # build the git-commit command and commit changes
    print('Pushing changes upstream')
    git_commit_command = ['git', 'commit']
    for commit_message in args.commit_message:
        git_commit_command.extend(['-m', commit_message])
    execute(git_commit_command, 'Could not commit changes')

    # https://www.youtube.com/watch?v=vCadcBR95oU
    execute(['git', 'push', '-u', 'origin', args.pages_branch], 'Could not push changes using provided credentials.')
    

# executes an external command, raises an exception if the return code is not 0
def execute(command, error_message='Error encountered while executing command'):
    # do not print the command! this might expose usernames/passwords/tokens!
    completed_process = subprocess.run(command, capture_output=True)
    if (completed_process.returncode != 0):
        raise Exception('{}\n  Exit code={}\n  stderr={}\n  stdout{}'.format(
            error_message, completed_process.returncode, completed_process.stderr, completed_process.stdout))

if __name__ == "__main__":
    main()
